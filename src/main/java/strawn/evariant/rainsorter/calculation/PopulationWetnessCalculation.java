/**
 * Copyright (C) 2016  David Strawn
 * 
 * This file is part of rainsorter.
 *
 * rainsorter is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 2.1 of the License, or
 * (at your option) any later version.
 *
 * rainsorter is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.

 * You should have received a copy of the GNU Lesser General Public License
 * along with rainsorter.  If not, see http://www.gnu.org/licenses.
 */
package strawn.evariant.rainsorter.calculation;

import strawn.evariant.rainsorter.tools.DataOrganizationMethods;
import java.io.IOException;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import org.opengis.feature.simple.SimpleFeature;
import strawn.evariant.rainsorter.data.msapop.MSAPopulationLoader;
import strawn.evariant.rainsorter.data.msapop.MSAPopulationRecord;
import strawn.evariant.rainsorter.data.msashapefile.MSAShapefileLoader;
import strawn.evariant.rainsorter.data.precipitation.PrecipitationLoader;
import strawn.evariant.rainsorter.data.precipitation.PrecipitationRecord;
import strawn.evariant.rainsorter.data.qclcdstations.QCWeatherStationLoader;
import strawn.evariant.rainsorter.data.qclcdstations.QCWeatherStationRecord;
import strawn.evariant.rainsorter.exceptions.InvalidDataException;
import strawn.evariant.rainsorter.tools.GeometryTools;

/**
 * This class is the main workhorse of rainsorter. 
 * All needed data sets meet here, and are connected in a meaningful way
 * This class computes the population wetness.
 */
public class PopulationWetnessCalculation {
    
    HashMap<String, WeatherStation> wbanToStationMap;
    List<MetropolitanStatisticalArea> metroAreas;
    List<SimpleFeature> regions;
    HashMap<String, MetropolitanStatisticalArea> msaMap;
    
    /**
     * Convenience method for loading up an Engine. 
     * Loads all data sets from their loaders and calls the constructor
     * 
     * @return Completed PopulationWetnessCalculation
     * @throws InvalidDataException - See constructor for details on why this is thrown
     * @throws IOException - Thrown if data was unable to be loaded from disk
     */
    public static PopulationWetnessCalculation createEngine() throws InvalidDataException, IOException {
        return new PopulationWetnessCalculation(
            MSAPopulationLoader.loadRecordsFromDisk(),
            QCWeatherStationLoader.loadRecordsFromDisk(),
            MSAShapefileLoader.loadFeatures(),
            PrecipitationLoader.loadRecordsFromDisk());
    }
    
    /**
     * Main constructor, requires all relevant data sets to be passed in at time of construction
     * 
     * @param populations List of MSAPopulationRecord generated by MSAPopulationLoader
     * @param stationRecords List of QCWeatherStationRecord generated by QCWeatherStationLoader
     * @param regions List of SimpleFeature generated by MSAShapefileLoader
     * @param precipitation List of PrecipitationRecord generated by PrecipitationLoader
     * @throws InvalidDataException Thrown if a precipitation record cannot be matched to a station
     */
    public PopulationWetnessCalculation(List<MSAPopulationRecord> populations, List<QCWeatherStationRecord> stationRecords, List<SimpleFeature> regions, List<PrecipitationRecord> precipitation) throws InvalidDataException {
        //store the list of Features(Regions)
        this.regions = regions;
        //create the MetropolitanStatisticalAreas from the MSAPopulationRecord records
        metroAreas = DataOrganizationMethods.createMSAList(populations);
        //create a map of the MSAs keyed by CBSA code
        msaMap = DataOrganizationMethods.createCBSACodeToMSAMap(metroAreas);
        //create a map of weather stations, keyed by WBAN
        wbanToStationMap = DataOrganizationMethods.createWBANToStationMap(stationRecords);
        //add geotools regions to MSAs
        addRegionsToMSAs();
        //map stations to MSAs
        addStationsToRegions();
        //add precipitation data to stations
        addPrecipitationDataToStations(precipitation);
        //drop stations with no data
        dropAllEmptyStations();
        //calculate population wetness of each MSA
        calculatePopulationWetness();
        //sort regions by population wetness
        Collections.sort(metroAreas, new MSAWetnessComparator());
    }
    
    /**
     * 
     * @return A list of MSAs sorted by population wetness
     */
    public List<MetropolitanStatisticalArea> getSortedMSAs() {
        return metroAreas;
    }
    
    /**
     * Add each Region to the appropriate MSA, using the CBSA code which is included in the Region data
     * 
     * @throws InvalidDataException 
     */
    private void addRegionsToMSAs() {
        for(SimpleFeature feature : regions) {
            String featureCBSACode = feature.getAttribute("CBSAFP").toString();
            MetropolitanStatisticalArea msa = msaMap.get(featureCBSACode);
            if(msa != null) {
                msa.addRegionFeature(feature);
            }
        }
    }
    
    /**
     * Uses the lat/long coordinates of a Weather Station to find the Region in which it belongs.
     * 
     * //TODO: This is slow, O(N^2) - we could write a faster algo by organizing the regions by boundary
     * but there are only ~400 MSAs and ~2500 stations, so this should go relatively fast
     * 
     * @throws InvalidDataException 
     */
    private void addStationsToRegions() {
        for(WeatherStation station : wbanToStationMap.values()) {
            for(SimpleFeature feature : regions) {
                String featureCBSACode = feature.getAttribute("CBSAFP").toString();
                if(GeometryTools.isPointInRegion(station.longitude, station.latitude, feature)) {
                    MetropolitanStatisticalArea msa = msaMap.get(featureCBSACode);
                    if(msa != null) {
                        msa.addStation(station);
                    }
                }
            }
        }
    }
    
    /**
     * Iterates through a list of precipitation records, and adds them to the appropriate weather station based on WBAN code 
     * @param precipitation
     * @throws InvalidDataException If a station cannot be found with the appropriate WBAN code
     */
    private void addPrecipitationDataToStations(List<PrecipitationRecord> precipitation) throws InvalidDataException {
        for(PrecipitationRecord record : precipitation) {
            WeatherStation station = wbanToStationMap.get(record.wbanCode);
            if(station != null) {
                station.addPrecipitationRecord(record);
            }else {
                throw new InvalidDataException("No station found for WBAN Code:" + record.wbanCode);
            }
        }
    }
    
    /**
     * Some stations have no precipitation date recorded from them. This removes all stations that do not have data
     * from the MSA they are assigned to(if any)
     */
    private void dropAllEmptyStations() {
        for(MetropolitanStatisticalArea msa : metroAreas) {
            msa.dropEmptyStations();
        }
    }
    
    /**
     * Iterates over all MSAs and has them compute population wetness
     */
    private void calculatePopulationWetness() {
        for(MetropolitanStatisticalArea msa : metroAreas) {
            msa.calculatePopulationWetness();
        }
    }
    
}
